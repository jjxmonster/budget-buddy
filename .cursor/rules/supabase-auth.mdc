---
description: 
globs: 
alwaysApply: false
---
# Supabase Auth Integration with Next.js App Router

This guide demonstrates how to implement authentication (sign-up & sign-in) in Next.js 14+ applications using Server Actions and the App Router architecture.

## Core Requirements

1. Use `@supabase/ssr` and `@supabase/supabase-js` packages
2. Implement Server Actions for authentication flows
3. Use proper middleware for route protection
4. Handle server-side session management
5. Implement proper client-side auth state updates

## Installation

```bash
npm install @supabase/ssr @supabase/supabase-js
```

## Environment Variables

Create `.env.local` file with required Supabase credentials:

```env
NEXT_PUBLIC_SUPABASE_URL=your_project_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_anon_key
```

For TypeScript support, create or update `types/supabase.ts`:

```typescript
export type Database = {
	// Your Supabase database types here
}
```

## Implementation Steps

### 1. Create Supabase Client Utils

Create `utils/supabase/server.ts`:

```typescript
import { createServerClient, type CookieOptions } from "@supabase/ssr"
import { cookies } from "next/headers"
import { Database } from "@/types/supabase"

export function createClient() {
	const cookieStore = cookies()

	return createServerClient<Database>(
		process.env.NEXT_PUBLIC_SUPABASE_URL!,
		process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
		{
			cookies: {
				get(name: string) {
					return cookieStore.get(name)?.value
				},
				set(name: string, value: string, options: CookieOptions) {
					try {
						cookieStore.set({ name, value, ...options })
					} catch (error) {
						// Handle cookie errors
					}
				},
				remove(name: string, options: CookieOptions) {
					try {
						cookieStore.set({ name, value: "", ...options })
					} catch (error) {
						// Handle cookie errors
					}
				},
			},
		}
	)
}
```

Create `utils/supabase/client.ts` for client-side operations:

```typescript
import { createBrowserClient } from "@supabase/ssr"
import { Database } from "@/types/supabase"

export function createClient() {
	return createBrowserClient<Database>(
		process.env.NEXT_PUBLIC_SUPABASE_URL!,
		process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
	)
}
```

### 2. Implement Authentication Middleware

Create `middleware.ts` in the root directory:

```typescript
import { createServerClient, type CookieOptions } from "@supabase/ssr"
import { NextResponse, type NextRequest } from "next/server"

export async function middleware(request: NextRequest) {
	const response = NextResponse.next()

	const supabase = createServerClient(
		process.env.NEXT_PUBLIC_SUPABASE_URL!,
		process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
		{
			cookies: {
				get(name: string) {
					return request.cookies.get(name)?.value
				},
				set(name: string, value: string, options: CookieOptions) {
					request.cookies.set({
						name,
						value,
						...options,
					})
					response.cookies.set({
						name,
						value,
						...options,
					})
				},
				remove(name: string, options: CookieOptions) {
					request.cookies.set({
						name,
						value: "",
						...options,
					})
					response.cookies.set({
						name,
						value: "",
						...options,
					})
				},
			},
		}
	)

	const {
		data: { session },
	} = await supabase.auth.getSession()

	// Protected routes - adjust according to your needs
	const protectedRoutes = ["/dashboard", "/profile"]
	const isProtectedRoute = protectedRoutes.some((route) => request.nextUrl.pathname.startsWith(route))

	if (isProtectedRoute && !session) {
		return NextResponse.redirect(new URL("/auth/login", request.url))
	}

	return response
}

export const config = {
	matcher: [
		/*
		 * Match all request paths except:
		 * - _next/static (static files)
		 * - _next/image (image optimization files)
		 * - favicon.ico (favicon file)
		 * - public folder
		 */
		"/((?!_next/static|_next/image|favicon.ico|public/).*)",
	],
}
```

### 3. Implement Server Actions

Create `app/actions/auth.ts`:

```typescript
"use server"

import { createClient } from "@/utils/supabase/server"
import { redirect } from "next/navigation"
import { revalidatePath } from "next/cache"

export async function signIn(formData: FormData) {
	const supabase = createClient()

	const { error } = await supabase.auth.signInWithPassword({
		email: formData.get("email") as string,
		password: formData.get("password") as string,
	})

	if (error) {
		return { error: error.message }
	}

	revalidatePath("/", "layout")
	redirect("/dashboard")
}

export async function signUp(formData: FormData) {
	const supabase = createClient()

	const { error } = await supabase.auth.signUp({
		email: formData.get("email") as string,
		password: formData.get("password") as string,
		options: {
			emailRedirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`,
		},
	})

	if (error) {
		return { error: error.message }
	}

	return { message: "Check your email to confirm your account" }
}

export async function signOut() {
	const supabase = createClient()
	await supabase.auth.signOut()
	revalidatePath("/", "layout")
	redirect("/auth/login")
}
```

### 4. Create Auth Components

Create `app/auth/login/page.tsx`:

```typescript
import { signIn } from '@/app/actions/auth'

export default function LoginPage() {
  return (
    <form action={signIn}>
      <input
        name="email"
        type="email"
        required
        placeholder="Email"
      />
      <input
        type="password"
        name="password"
        required
        placeholder="Password"
      />
      <button type="submit">Sign In</button>
    </form>
  )
}
```

### 5. Implement Auth Provider

Create `components/providers/supabase-provider.tsx`:

```typescript
'use client'

import { createContext, useContext, useEffect, useState } from 'react'
import { createClient } from '@/utils/supabase/client'
import { useRouter } from 'next/navigation'
import type { User } from '@supabase/supabase-js'

const Context = createContext<{ user: User | null; loading: boolean }>({
  user: null,
  loading: true,
})

export default function SupabaseProvider({
  children,
}: {
  children: React.ReactNode
}) {
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)
  const router = useRouter()
  const supabase = createClient()

  useEffect(() => {
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((event, session) => {
      setUser(session?.user ?? null)
      setLoading(false)
      router.refresh()
    })

    return () => {
      subscription.unsubscribe()
    }
  }, [router, supabase])

  return (
    <Context.Provider value={{ user, loading }}>
      {children}
    </Context.Provider>
  )
}

export const useSupabase = () => {
  const context = useContext(Context)
  if (context === undefined) {
    throw new Error('useSupabase must be used within a SupabaseProvider')
  }
  return context
}
```

### 6. Add Provider to Root Layout

Update `app/layout.tsx`:

```typescript
import SupabaseProvider from '@/components/providers/supabase-provider'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <SupabaseProvider>
          {children}
        </SupabaseProvider>
      </body>
    </html>
  )
}
```

## Security Best Practices

1. Always use Server Actions for authentication operations
2. Never expose Supabase keys in client components
3. Implement proper CSRF protection
4. Use proper error handling and logging
5. Implement rate limiting for auth endpoints
6. Use secure session management

## Common Pitfalls to Avoid

1. DO NOT use client-side authentication methods directly
2. DO NOT store sensitive data in localStorage
3. DO NOT skip middleware authentication checks
4. DO NOT expose sensitive environment variables to the client
5. Always handle loading and error states properly
6. Remember to revalidate paths after auth state changes

## Route Protection Example

For protected routes, create a higher-order component:

```typescript
// app/dashboard/layout.tsx
import { createClient } from '@/utils/supabase/server'
import { redirect } from 'next/navigation'

export default async function ProtectedLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const supabase = createClient()
  const { data: { session } } = await supabase.auth.getSession()

  if (!session) {
    redirect('/auth/login')
  }

  return <>{children}</>
}
```
